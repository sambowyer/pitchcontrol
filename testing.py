import predict
from timeit import default_timer as timer
import os.path

def testAllAlgorithmsToCSV(signal, sampleRate, signalType, trueFreq, csvFilePath):
    '''If the document csvFilePath already exists, this function assumes that the file already contains headers: signalName, sampleRate, algorithm, algorithmParameters, trueFreq, predFreq, time
    Else, it creates the file csvFilePath and writes those headers as the first line.
    In either case, the function then writes in the relevant data generated by predicting the pitch of 'signal' using all prediction algorithms.'''

    fileAlreadyExists = False
    if os.path.isfile(csvFilePath):
        fileAlreadyExists = True

    with open(csvFilePath, "a") as f:
        if not fileAlreadyExists:
            f.write("signalType,sampleRate,algorithm,algorithmParameters,trueFreq,predFreq,time\n")
        
        ##  execute predictions in the following order: 
        ##      zerocross, autocorrelation, AMDF, naiveFT, cepstrum, HPS (then all of those averaged out (excluding min and max estimates))

        executionTimes = []
        predictions = []

        #params may be changed later to get a wider range of results
        params = {"b" : 1, "isCustomFFT" : False, "numDownsamples" : 4}

        ## Calculations

        #zerocross
        start = timer()
        pred = predict.zerocross(signal, sampleRate)
        end = timer()

        predictions.append(pred)
        executionTimes.append(end-start)

        f.write("%s,%s,%s,%s,%s,%s,%s\n" % (signalType, sampleRate, "zerocross", "n/a", trueFreq, pred, end-start))

        #autocorrelation
        start = timer()
        pred = predict.autocorrelation(signal, sampleRate)
        end = timer()

        predictions.append(pred)
        executionTimes.append(end-start)

        f.write("%s,%s,%s,%s,%s,%s,%s\n" % (signalType, sampleRate, "autocorrelation", "n/a", trueFreq, pred, end-start))


        #AMDF
        start = timer()
        pred = predict.AMDF(signal, sampleRate, params["b"])
        end = timer()

        predictions.append(pred)
        executionTimes.append(end-start)

        f.write("%s,%s,%s,%s,%s,%s,%s\n" % (signalType, sampleRate, "AMDF", "b=" + str(params["b"]), trueFreq, pred, end-start))

        #naiveFT
        start = timer()
        pred = predict.naiveFT(signal, sampleRate, params["isCustomFFT"])
        end = timer()

        predictions.append(pred)
        executionTimes.append(end-start)

        f.write("%s,%s,%s,%s,%s,%s,%s\n" % (signalType, sampleRate, "naiveFT", "isCustomFFT=" + str(params["isCustomFFT"]), trueFreq, pred, end-start))

        #cepstrum
        start = timer()
        pred = predict.cepstrum(signal, sampleRate, params["isCustomFFT"])
        end = timer()

        predictions.append(pred)
        executionTimes.append(end-start)

        f.write("%s,%s,%s,%s,%s,%s,%s\n" % (signalType, sampleRate, "cepstrum", "isCustomFFT=" + str(params["isCustomFFT"]), trueFreq, pred, end-start))

        #HPS
        start = timer()
        pred = predict.HPS(signal, sampleRate, params["isCustomFFT"], params["numDownsamples"])
        end = timer()

        predictions.append(pred)
        executionTimes.append(end-start)

        f.write("%s,%s,%s,%s,%s,%s,%s\n" % (signalType, sampleRate, "HPS", "isCustomFFT=" + str(params["isCustomFFT"]) + "&numDownsamples=" + str(params["numDownsamples"]), trueFreq, pred, end-start))

        #average - exclude min and max
        pred = predict.getTrimmedMean(predictions, 1/3)
        time = sum(executionTimes)

        f.write("%s,%s,%s,%s,%s,%s,%s\n" % (signalType, sampleRate, "average", "b=" + str(params["b"]) + "&isCustomFFT=" + str(params["isCustomFFT"]) + "&numDownsamples=" + str(params["numDownsamples"]), trueFreq, pred, time))

        #median (exclude 1st and 2nd mins/maxs)
        pred = predict.getTrimmedMean(predictions, 2/3)
        time = sum(executionTimes)

        f.write("%s,%s,%s,%s,%s,%s,%s\n" % (signalType, sampleRate, "median", "b=" + str(params["b"]) + "&isCustomFFT=" + str(params["isCustomFFT"]) + "&numDownsamples=" + str(params["numDownsamples"]), trueFreq, pred, time))


